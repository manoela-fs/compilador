import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;

public class Main {

    public static void main(String[] args) throws Exception {

        // Alterar aqui para testar outro caso
        int test = 12;

        String code = switch (test) {
            // üß© TESTE 1 ‚Äì Programa m√≠nimo com main vazio
            case 1 -> """
                main() {
                }
            """;

            // üß© TESTE 2 ‚Äì Declara√ß√µes simples
            case 2 -> """
                main() {
                    int a;
                    float b;
                    char c;
                    boolean ok;
                }
            """;

            // üß© TESTE 3 ‚Äì Declara√ß√£o de vetor
            case 3 -> """
                main() {
                    int v[5];
                }
            """;

            // üß© TESTE 4 ‚Äì Atribui√ß√£o simples e express√£o aritm√©tica
            case 4 -> """
                main() {
                    int a;
                    a = 5 + 3 * 2;
                    println(a);
                }
            """;

            // üß© TESTE 5 ‚Äì Indexa√ß√£o e atribui√ß√£o em vetor
            case 5 -> """
                main() {
                    int v[10];
                    v[0] = 3;
                    v[1] = v[0] + 2;
                    println(v[1]);
                }
            """;

            // üß© TESTE 6 ‚Äì Estrutura condicional if/else
            case 6 -> """
                main() {
                    int a;
                    a = 5;
                    if (a > 3) {
                        println("maior");
                    } else {
                        println("menor ou igual");
                    }
                }
            """;

            // üß© TESTE 7 ‚Äì Estrutura de repeti√ß√£o while
            case 7 -> """
                main() {
                    int i;
                    i = 0;
                    while (i < 3) {
                        println(i);
                        i = i + 1;
                    }
                }
            """;

            // üß© TESTE 8 ‚Äì Estrutura de repeti√ß√£o for
            case 8 -> """
                main() {
                    int i;
                    for (i = 0; i < 3; i = i + 1) {
                        println(i);
                    }
                }
            """;

            // üß© TESTE 9 ‚Äì Fun√ß√£o auxiliar antes do main
            case 9 -> """
                int soma(int x, int y) {
                    return x + y;
                }

                main() {
                    int r;
                    r = soma(2, 3);
                    println(r);
                }
            """;

            // üß© TESTE 10 ‚Äì Fun√ß√£o como express√£o dentro de atribui√ß√£o
            case 10 -> """
                int multiplicar(int a, int b) {
                    return a * b;
                }

                main() {
                    int resultado;
                    resultado = multiplicar(4, 5);
                    println(resultado);
                }
            """;

            // üß© TESTE 11 ‚Äì ERRO proposital: atribui√ß√£o inv√°lida
            case 11 -> """
                main() {
                    int a = 5; // Inicializa√ß√£o direta n√£o permitida
                }
            """;

            // üß© TESTE 12 ‚Äì ERRO proposital: chamada de fun√ß√£o com falta de par√™ntese
            case 12 -> """
                int soma(int x, int y) {
                    return x + y;
                }

                main() {
                    int r;
                    r = soma(2, 3; // Par√™ntese errado
                    println(r);
                }
            """;

            default -> throw new IllegalArgumentException("N√∫mero de teste inv√°lido.");
        };

        System.out.println("üß† Executando TESTE " + test + "...\n");

        // Criar CharStream a partir da string
        CharStream input = CharStreams.fromString(code);

        // Criar o lexer e o parser
        LangLexer lexer = new LangLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        LangParser parser = new LangParser(tokens);

        // Mostrar erros detalhados
        parser.removeErrorListeners();
        parser.addErrorListener(new DiagnosticErrorListener());
        parser.addErrorListener(ConsoleErrorListener.INSTANCE);

        // Parse do programa
        ParseTree tree = parser.program();

        // Print da √°rvore gerada
        System.out.println("\nüå≥ √Årvore sint√°tica:");
        System.out.println(tree.toStringTree(parser));
    }
}
